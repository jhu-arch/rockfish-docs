SAMPLES = ["A", "B"]

rule all:
    input:
        "report.html"

# Step 2: Generalizing the read mapping rule

rule bwa_map:
    input:
        "../data/genome.fa",
        "../data/samples/{sample}.fastq"
    output:
        "mapped_reads/{sample}.bam"
    shell:
      '''
         module load bwa-mem

         bwa mem {input} | samtools view -Sb - > {output}
'''

# Step 3: Sorting read alignments

rule samtools_sort:
    input:
        "mapped_reads/{sample}.bam"
    output:
        "sorted_reads/{sample}.bam"
    shell:
      '''
         module load samtools

         samtools sort -T sorted_reads/{wildcards.sample} -O bam {input} > {output}
'''

# Step 4: Indexing read alignments and visualizing the DAG of jobs

rule samtools_index:
    input:
        "sorted_reads/{sample}.bam"
    output:
        "sorted_reads/{sample}.bam.bai"
    shell:
      '''
         module load samtools

         samtools index {input}
'''

# Step 5: Calling genomic variants

rule bcftools_call:
    input:
        fa="../data/genome.fa",
        bam=expand("sorted_reads/{sample}.bam", sample=SAMPLES),
        bai=expand("sorted_reads/{sample}.bam.bai", sample=SAMPLES)
    output:
        "calls/all.vcf"
    shell:
      '''
         module load samtools
         module load bcftools

         samtools mpileup -g -f {input.fa} {input.bam} |
         bcftools call -mv - > {output}

'''

# Step 6: Writing a report

rule report:
    input:
        "calls/all.vcf"
    output:
        "report.html"
    run:
        from snakemake.utils import report
        with open(input[0]) as vcf:
            n_calls = sum(1 for l in vcf if not l.startswith("#"))

        report("""
        An example variant calling workflow
        ===================================

        Reads were mapped to the Yeast
        reference genome and variants were called jointly with
        SAMtools/BCFtools.

        This resulted in {n_calls} variants (see Table T1_).
        """, output[0], T1=input[0])
